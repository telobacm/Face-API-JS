// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = [] // You won't need this in Prisma 3.X or higher.
}

enum USER_ROLES {
  SUPERADMIN
  ADMIN
  USER
}

enum POSITIONS {
  DOSEN
  STAFF
  SATPAM
}

enum ENTER_EXIT {
  Masuk
  Pulang
}

model Users {
  id          String     @id @unique @default(cuid())
  name        String
  password    String
  nip         String     @unique
  email       String     @unique
  role        USER_ROLES
  position    POSITIONS
  gender      String
  whitelist   Boolean    @default(false)
  kampusId    Int
  unitId      Int
  subunitId   Int?
  descriptors Json
  reports     Reports[]
  kampus      Kampus     @relation(fields: [kampusId], references: [id])
  unit        Unit       @relation(fields: [unitId], references: [id])
  subunit     Subunit?   @relation(fields: [subunitId], references: [id])
  isDeleted   Boolean    @default(false)

  @@map("users")
}

model Kampus {
  id      Int       @id @unique @default(autoincrement())
  name    String
  devices Devices[]
  users   Users[]
  reports Reports[]

  @@map("kampus")
}

model Unit {
  id      Int       @id @unique @default(autoincrement())
  name    String
  devices Devices[]
  users   Users[]
  reports Reports[]

  @@map("unit")
}

model Subunit {
  id       Int       @id @unique @default(autoincrement())
  name     String
  position POSITIONS
  users    Users[]

  @@map("subunit")
}

model Reports {
  id          Int        @id @unique @default(autoincrement())
  timestamp   DateTime   @default(now())
  ekspresi    String
  enterExit   ENTER_EXIT
  isPunctual  String?
  shiftSatpam String?
  userId      String
  image       String?
  user        Users      @relation(fields: [userId], references: [id])
  kampusId    Int
  unitId      Int
  kampus      Kampus     @relation(fields: [kampusId], references: [id])
  unit        Unit       @relation(fields: [unitId], references: [id])

  @@map("reports")
}

model Devices {
  id       String @id @unique @default(cuid())
  mac      String @unique
  kampusId Int
  unitId   Int
  kampus   Kampus @relation(fields: [kampusId], references: [id])
  unit     Unit   @relation(fields: [unitId], references: [id])

  @@map("devices")
}
